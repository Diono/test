.test {
  background: url("/dist/sprite.1620828624838.svg#sprite-separator-light-middle-fragment") center no-repeat;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93d3cvc3JjL3Njc3MvdGVzdC5zY3NzIiwid2VicGFjazovLy8uL3d3dy9zcmMvc2Nzcy9jb21tb24vX3Nwcml0ZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VDOEZJO0FEOUZKLEMiLCJmaWxlIjoidGVzdC4xNjIwODI4NjI0ODM4LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJ2NvbW1vbi9zcHJpdGUnO1xyXG5cclxuLnRlc3Qge1xyXG4gIEBpbmNsdWRlIHNwcml0ZSgnc2VwYXJhdG9yLWxpZ2h0LW1pZGRsZScpO1xyXG59XHJcbiIsIiRzcHJpdGVzOiAoXG4gICAgJ3NlcGFyYXRvci1saWdodC1sZWZ0JzogXCIvZGlzdC9zcHJpdGUuMTYyMDgyODYyNDgzOC5zdmcjc3ByaXRlLXNlcGFyYXRvci1saWdodC1sZWZ0LWZyYWdtZW50XCIsXG4gICAgJ3NlcGFyYXRvci1saWdodC1taWRkbGUnOiBcIi9kaXN0L3Nwcml0ZS4xNjIwODI4NjI0ODM4LnN2ZyNzcHJpdGUtc2VwYXJhdG9yLWxpZ2h0LW1pZGRsZS1mcmFnbWVudFwiLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtcmlnaHQnOiBcIi9kaXN0L3Nwcml0ZS4xNjIwODI4NjI0ODM4LnN2ZyNzcHJpdGUtc2VwYXJhdG9yLWxpZ2h0LXJpZ2h0LWZyYWdtZW50XCIsXG4gICAgJ3NlcGFyYXRvci1saWdodC13aGVlbC1sJzogXCIvZGlzdC9zcHJpdGUuMTYyMDgyODYyNDgzOC5zdmcjc3ByaXRlLXNlcGFyYXRvci1saWdodC13aGVlbC1sLWZyYWdtZW50XCIsXG4gICAgJ3NlcGFyYXRvci1saWdodC13aGVlbC1tJzogXCIvZGlzdC9zcHJpdGUuMTYyMDgyODYyNDgzOC5zdmcjc3ByaXRlLXNlcGFyYXRvci1saWdodC13aGVlbC1tLWZyYWdtZW50XCIsXG4gICAgJ3NlcGFyYXRvci1saWdodC13aGVlbC1zJzogXCIvZGlzdC9zcHJpdGUuMTYyMDgyODYyNDgzOC5zdmcjc3ByaXRlLXNlcGFyYXRvci1saWdodC13aGVlbC1zLWZyYWdtZW50XCIsXG4gICAgJ3NlcGFyYXRvci1saWdodC13aGVlbC14bCc6IFwiL2Rpc3Qvc3ByaXRlLjE2MjA4Mjg2MjQ4Mzguc3ZnI3Nwcml0ZS1zZXBhcmF0b3ItbGlnaHQtd2hlZWwteGwtZnJhZ21lbnRcIlxuKTtcblxuJHNpemVzOiAoXG4gICAgJ3NlcGFyYXRvci1saWdodC1sZWZ0JzogKFxuICAgICAgICAnd2lkdGgnOiA2MnB4LFxuICAgICAgICAnaGVpZ2h0JzogMTI4cHhcbiAgICApLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtbWlkZGxlJzogKFxuICAgICAgICAnd2lkdGgnOiAyNjRweCxcbiAgICAgICAgJ2hlaWdodCc6IDEyOHB4XG4gICAgKSxcbiAgICAnc2VwYXJhdG9yLWxpZ2h0LXJpZ2h0JzogKFxuICAgICAgICAnd2lkdGgnOiA2MnB4LFxuICAgICAgICAnaGVpZ2h0JzogMTI4cHhcbiAgICApLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtd2hlZWwtbCc6IChcbiAgICAgICAgJ3dpZHRoJzogNDhweCxcbiAgICAgICAgJ2hlaWdodCc6IDQ4cHhcbiAgICApLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtd2hlZWwtbSc6IChcbiAgICAgICAgJ3dpZHRoJzogMzJweCxcbiAgICAgICAgJ2hlaWdodCc6IDMycHhcbiAgICApLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtd2hlZWwtcyc6IChcbiAgICAgICAgJ3dpZHRoJzogMTZweCxcbiAgICAgICAgJ2hlaWdodCc6IDE2cHhcbiAgICApLFxuICAgICdzZXBhcmF0b3ItbGlnaHQtd2hlZWwteGwnOiAoXG4gICAgICAgICd3aWR0aCc6IDY0cHgsXG4gICAgICAgICdoZWlnaHQnOiA2NHB4XG4gICAgKVxuKTtcblxuJHZhcmlhYmxlczogKFxuICAgIC8qIEVNUFRZICovXG4pO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2FsZGVtYXJmbS9zYXNzLXN2Zy11cmkvYmxvYi92MS4wLjAvX3N2Zy11cmkuc2Nzc1xuQGZ1bmN0aW9uIHNwcml0ZS1zdHItcmVwbGFjZSgkc3RyaW5nLCAkc2VhcmNoLCAkcmVwbGFjZTogJycpIHtcbiAgICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VhcmNoKTtcblxuICAgIEBpZiB0eXBlLW9mKCRyZXBsYWNlKSA9PSAnbnVsbCcge1xuICAgICAgICAkcmVwbGFjZTogJyc7XG4gICAgfVxuXG4gICAgQGlmICggJGluZGV4ICkge1xuICAgICAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAxLCAkaW5kZXggLSAxKSArICRyZXBsYWNlICsgc3ByaXRlLXN0ci1yZXBsYWNlKHN0ci1zbGljZSgkc3RyaW5nLCAkaW5kZXggKyBzdHItbGVuZ3RoKCRzZWFyY2gpKSwgJHNlYXJjaCwgJHJlcGxhY2UpO1xuICAgIH1cblxuICAgIEByZXR1cm4gJHN0cmluZztcbn1cblxuQGZ1bmN0aW9uIHNwcml0ZS1zdmctdXJpKCR2YWx1ZSkge1xuICAgICRlbmNvZGVkOiAnJztcbiAgICAkc2xpY2U6IDIwMDA7XG4gICAgJGluZGV4OiAwO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBjZWlsKHN0ci1sZW5ndGgoJHZhbHVlKSAvICRzbGljZSkge1xuICAgICAgICAkY2h1bms6IHN0ci1zbGljZSgkdmFsdWUsICRpbmRleCwgJGluZGV4ICsgJHNsaWNlIC0gMSk7XG4gICAgICAgICRjaHVuazogc3ByaXRlLXN0ci1yZXBsYWNlKCRjaHVuaywgJ1wiJywgXCInXCIpO1xuICAgICAgICAkY2h1bms6IHNwcml0ZS1zdHItcmVwbGFjZSgkY2h1bmssICc8JywgJyUzQycpO1xuICAgICAgICAkY2h1bms6IHNwcml0ZS1zdHItcmVwbGFjZSgkY2h1bmssICc+JywgJyUzRScpO1xuICAgICAgICAkY2h1bms6IHNwcml0ZS1zdHItcmVwbGFjZSgkY2h1bmssICcmJywgJyUyNicpO1xuICAgICAgICAkY2h1bms6IHNwcml0ZS1zdHItcmVwbGFjZSgkY2h1bmssICcjJywgJyUyMycpO1xuICAgICAgICAkZW5jb2RlZDogI3skZW5jb2RlZH0jeyRjaHVua307XG4gICAgICAgICRpbmRleDogJGluZGV4ICsgJHNsaWNlO1xuICAgIH1cblxuICAgIEByZXR1cm4gJGVuY29kZWQ7XG59XG5cbkBtaXhpbiBzcHJpdGUoJG5hbWUsICR1c2VyLXZhcmlhYmxlczogKCksICRpbmNsdWRlLXNpemU6IGZhbHNlKSB7XG4gICAgJHNwcml0ZTogbWFwLWdldCgkc3ByaXRlcywgJG5hbWUpO1xuXG4gICAgLy8gSW5qZWN0IHZhcmlhYmxlc1xuICAgICRkZWZhdWx0LXZhcmlhYmxlczogbWFwLWdldCgkdmFyaWFibGVzLCAkbmFtZSk7XG4gICAgQGlmIHR5cGUtb2YoJGRlZmF1bHQtdmFyaWFibGVzKSA9PSAnbWFwJyB7XG4gICAgICAgIEBlYWNoICRrZXksICR2YWx1ZSBpbiBtYXAtbWVyZ2UoJGRlZmF1bHQtdmFyaWFibGVzLCAkdXNlci12YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIEBpZiAoIG5vdCBtYXAtaGFzLWtleSgkZGVmYXVsdC12YXJpYWJsZXMsICRrZXkpICkge1xuICAgICAgICAgICAgICAgIEB3YXJuICdTcHJpdGUgXFwnI3skbmFtZX1cXCcgZG9lcyBub3Qgc3VwcG9ydCB2YXJpYWJsZSBuYW1lZCBcXCcjeyRrZXl9XFwnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNwcml0ZTogc3ByaXRlLXN0ci1yZXBsYWNlKCRzcHJpdGUsICdfX18jeyRrZXl9X19fJywgc3ByaXRlLXN2Zy11cmkocXVvdGUoI3skdmFsdWV9KSkpO1xuICAgICAgICB9XG4gICAgfSBAZWxzZSBpZiB0eXBlLW9mKCR1c2VyLXZhcmlhYmxlcykgPT0gJ21hcCcge1xuICAgICAgICBAd2FybiAnU3ByaXRlIFxcJyN7JG5hbWV9XFwnIGRvZXMgbm90IGNvbnRhaW4gYW55IHZhcmlhYmxlcyc7XG4gICAgfVxuXG4gICAgYmFja2dyb3VuZDogdXJsKCRzcHJpdGUpIGNlbnRlciBuby1yZXBlYXQ7XG5cbiAgICBAaWYgJGluY2x1ZGUtc2l6ZSB7XG4gICAgICAgICRzaXplOiBtYXAtZ2V0KCRzaXplcywgJG5hbWUpO1xuICAgICAgICBAaWYgJGluY2x1ZGUtc2l6ZSA9PSB0cnVlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogbWFwLWdldCgkc2l6ZSwgd2lkdGgpIG1hcC1nZXQoJHNpemUsIGhlaWdodCk7XG4gICAgICAgIH0gQGVsc2UgaWYgJGluY2x1ZGUtc2l6ZSA9PSAnYm94JyB7XG4gICAgICAgICAgICB3aWR0aDogbWFwLWdldCgkc2l6ZSwgd2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0OiBtYXAtZ2V0KCRzaXplLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==*/